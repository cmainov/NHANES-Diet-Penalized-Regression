paste0(covariates,collapse = '+'))),
design=design,
family = 'quasibinomial')
modelfulla_T<-survey::svyglm(formula(paste0('BinFoodSecHH~',var.names[i],'_trend+',
paste0(covariates,collapse = '+'))),
design=design,
family = 'quasibinomial')
modelfulla_L<-survey::svyglm(formula(paste0('BinFoodSecHH~',var.names[i],'_sc+',
paste0(covariates,collapse = '+'))),
design=design,
family = 'quasibinomial')
modelfulla_L2<-survey::svyglm(formula(paste0('BinFoodSecHH~',var.names[i],'_sc2+',
paste0(covariates,collapse = '+'))),
design=design,
family = 'quasibinomial')
xsum1<-round(exp(summary(modelfull)$coefficients),digits=2)
xsum1nr<-summary(modelfull)$coefficients # not rounded to get correct asterisks in table
xsci<-round(exp(confint(modelfull)),digits=2)
xtrend<-round(summary(modelfulla_T)$coefficients,digits=2)
xlin<-round(exp(summary(modelfulla_L)$coefficients),digits=2)
xlinci<-round(exp(confint(modelfulla_L)),digits=2)
xlin2<-round(summary(modelfulla_L2)$coefficients,digits=2)
if (is.null(subset.condition)==F) {
tab.row<-data.frame(patt=stringr::str_remove_all(stringr::str_remove_all(rownames(xsum1)[2],'factor\\('),'_q\\)\\d'),
subset=subset.condition,
Q1=1,Q2=paste0(xsum1[2,1],' (',xsci[2,1],'-',xsci[2,2],')'),
Q3=paste0(xsum1[3,1],' (',xsci[3,1],'-',xsci[3,2],')'),
Q4=paste0(xsum1[4,1],' (',xsci[4,1],'-',xsci[4,2],')'),
Q5=paste0(xsum1[5,1],' (',xsci[5,1],'-',xsci[5,2],')'),
pq5=round(xsum1nr[5,4],digits=2),ptrend=xtrend[2,4],
lin=paste0(xlin[2,1],' (',xlinci[2,1],'-',xlinci[2,2],')'),
quadp=xlin2[2,4])
}
else if (is.null(subset.condition)) {
tab.row<-data.frame(patt=stringr::str_remove_all(stringr::str_remove_all(rownames(xsum1)[2],'factor\\('),'_q\\)\\d'),
Q1=1,Q2=paste0(xsum1[2,1],' (',xsci[2,1],'-',xsci[2,2],')'),
Q3=paste0(xsum1[3,1],' (',xsci[3,1],'-',xsci[3,2],')'),
Q4=paste0(xsum1[4,1],' (',xsci[4,1],'-',xsci[4,2],')'),
Q5=paste0(xsum1[5,1],' (',xsci[5,1],'-',xsci[5,2],')'),
pq5=round(xsum1nr[5,4],digits=2),ptrend=xtrend[2,4],
lin=paste0(xlin[2,1],' (',xlinci[2,1],'-',xlinci[2,2],')'),
quadp=xlin2[2,4])
}
tab.row<-tab.row%>%
mutate(Q2=ifelse(xsum1nr[2,4]<0.05 & xsum1nr[2,4]>=0.01,stringr::str_replace(Q2,'$','*'),
ifelse(xsum1nr[2,4]<0.01,stringr::str_replace(Q2,'$','**'),Q2)))%>%
mutate(Q3=ifelse(xsum1nr[3,4]<0.05 & xsum1nr[3,4]>=0.01,stringr::str_replace(Q3,'$','*'),
ifelse(xsum1nr[3,4]<0.01,stringr::str_replace(Q3,'$','**'),Q3)))%>%
mutate(Q4=ifelse(xsum1nr[4,4]<0.05 & xsum1nr[4,4]>=0.01,stringr::str_replace(Q4,'$','*'),
ifelse(xsum1nr[4,4]<0.01,stringr::str_replace(Q4,'$','**'),Q4)))%>%
mutate(Q5=ifelse(xsum1nr[5,4]<0.05 & xsum1nr[5,4]>=0.01,stringr::str_replace(Q5,'$','*'),
ifelse(xsum1nr[5,4]<0.01,stringr::str_replace(Q5,'$','**'),Q5)))%>%
mutate(pq5=ifelse(xsum1nr[5,4]>=0.05,pq5,
ifelse(xsum1nr[5,4]<0.05 & xsum1nr[5,4]>=0.01,stringr::str_replace(pq5,'$','*'),
ifelse(xsum1nr[5,4]<0.01,'<0.01**',`pq5`))))%>%
mutate(lin=ifelse(summary(modelfulla_L)$coefficients[2,4]<0.05 & summary(modelfulla_L)$coefficients[2,4]>=0.01,stringr::str_replace(lin,'$','*'),
ifelse(summary(modelfulla_L)$coefficients[2,4]<0.01,stringr::str_replace(lin,'$','**'),lin)))%>%
mutate(ptrend=(ifelse(xtrend[2,4]>=0.05,ptrend,
ifelse(xtrend[2,4]<0.05 & xtrend[2,4]>=0.01,stringr::str_replace(ptrend,'$','*'),
ifelse(xtrend[2,4]<0.01,'<0.01**',ptrend)))))%>%
mutate(quadp=(ifelse(xlin2[2,4]>=0.05,quadp,
ifelse(xlin2[2,4]<0.05 & xlin2[2,4]>=0.01,stringr::str_replace(quadp,'$','*'),
ifelse(xlin2[2,4]<0.01,'<0.01**',quadp)))))
model.list[[i]]<-modelfull
if( i ==1){
out.results<-tab.row
}
else if( i !=1){
out.results<-rbind(out.results,tab.row)
}
}
# Text process results table
if (is.null(subset.condition)==F) {
for(i in c(3:6,9)){
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)(\\))','0)')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)(\\s)','0 ')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)(\\-)','0-')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\-\\d)(\\))','.00)')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=^\\d)(\\s\\()','.00 (')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\(\\d)\\-','.00-')
}
for(i in c(7,8,10)){
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)($)','0')
}
}
else if (is.null(subset.condition)==F){
for(i in c(2:5,8)){
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)(\\))','0)')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)(\\s)','0 ')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)(\\-)','0-')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\-\\d)(\\))','.00)')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=^\\d)(\\s\\()','.00 (')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\(\\d)\\-','.00-')
}
for(i in c(6,7,9)){
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)($)','0')
}
}
return(list(results=out.results))
}
results_function<-function(df, covariates, variables, cuts, subset.condition=NULL ) {
import::from(magrittr, '%>%')
################################################################################################################
########################### START reading helper functions into function environment ###########################
################################################################################################################
## quantile cutting function ##
quant_cut<-function(var,x,df){
xvec<-vector() # initialize null vector to store
for (i in 1:x){
xvec[i]<-i/x
}
qs<-c(min(df[[var]],na.rm=T), quantile(df[[var]],xvec,na.rm=T))
df[['new']]=x+1 #initialize variable
for (i in 1:(x)){
df[['new']]<-ifelse(df[[var]]<qs[i+1] & df[[var]]>=qs[i],
c(1:length(qs))[i],
ifelse(df[[var]]==qs[qs==max(qs)],x,df[['new']]))
}
return(df[['new']])
}
## trend variable-creating function ##
trend_func<-function(rank.var,cont.var,df,trend.var,x){
df[[trend.var]]=1
medians<-vector()
for (i in 1:x){
newdf<-df[df[[rank.var]]==i,]
medians[i]<-median(newdf[[cont.var]],na.rm=T)
df[[trend.var]]<-ifelse(df[[rank.var]]==i,medians[i],df[[trend.var]])
}
return(df)
}
##################################################################################################################
########################################## END reading helper functions ##########################################
##################################################################################################################
# index names and naming index quantile variables to be introduced into data
var.names<-variables
var.names.q<-paste0(var.names,'_q') # create variable names for new cut variables, pasting '_q' at end of names
var.names.trend<-paste0(var.names,'_trend') # create variable names for new cut variables, pasting '_q' at end of names
# subset analytical sample to calculate quantiles and trend variables
if (is.null( subset.condition )){
df.sub <- df
}
else if (is.null( subset.condition )==F){
df.sub<-df[which(eval(parse(text=paste0('df$',subset.condition)))),]
}
# create quantile, trend, standardized, and transformed (square) variables on data subset
for(i in 1:length(variables)){
df.sub[,var.names.q[i]]<-quant_cut(var = var.names[i],
x=cuts,df=df.sub) # cut
df.sub<-trend_func(rank.var=var.names.q[i],
cont.var=var.names[i],df=df.sub, trend.var=var.names.trend[i],x=cuts) # trend
df.sub[,paste0(var.names[i],'_sc')]<- df.sub[,var.names[i]] / sd( df.sub[,var.names[i]], na.rm=T ) # standardized
df.sub[,paste0(var.names[i],'_sc2')]<- ( df.sub[,var.names[i]] / sd( df.sub[,var.names[i]], na.rm=T ) )^2 # squared
}
# join with input dataset
df.new <- left_join( df, df.sub )
design<-survey::svydesign(id = ~SDMVPSU, weights = ~WTDR18YR, strata = ~SDMVSTRA,
nest = TRUE, survey.lonely.psu = "adjust", data = df.new)
if(is.null(subset.condition)==F){
design<-subset(design, eval(parse(text=(subset.condition)))) # inclusions/exclusions
}
# fit models
model.list<- list() # empty list to store results
for(i in 1:length(var.names)){
modelfull<-survey::svyglm(formula(paste0('BinFoodSecHH~factor(',var.names[i],'_q)+',
paste0(covariates,collapse = '+'))),
design=design,
family = 'quasibinomial')
modelfulla_T<-survey::svyglm(formula(paste0('BinFoodSecHH~',var.names[i],'_trend+',
paste0(covariates,collapse = '+'))),
design=design,
family = 'quasibinomial')
modelfulla_L<-survey::svyglm(formula(paste0('BinFoodSecHH~',var.names[i],'_sc+',
paste0(covariates,collapse = '+'))),
design=design,
family = 'quasibinomial')
modelfulla_L2<-survey::svyglm(formula(paste0('BinFoodSecHH~',var.names[i],'_sc2+',
paste0(covariates,collapse = '+'))),
design=design,
family = 'quasibinomial')
xsum1<-round(exp(summary(modelfull)$coefficients),digits=2)
xsum1nr<-summary(modelfull)$coefficients # not rounded to get correct asterisks in table
xsci<-round(exp(confint(modelfull)),digits=2)
xtrend<-round(summary(modelfulla_T)$coefficients,digits=2)
xlin<-round(exp(summary(modelfulla_L)$coefficients),digits=2)
xlinci<-round(exp(confint(modelfulla_L)),digits=2)
xlin2<-round(summary(modelfulla_L2)$coefficients,digits=2)
if (is.null(subset.condition)==F) {
tab.row<-data.frame(patt=stringr::str_remove_all(stringr::str_remove_all(rownames(xsum1)[2],'factor\\('),'_q\\)\\d'),
subset=subset.condition,
Q1=1,Q2=paste0(xsum1[2,1],' (',xsci[2,1],'-',xsci[2,2],')'),
Q3=paste0(xsum1[3,1],' (',xsci[3,1],'-',xsci[3,2],')'),
Q4=paste0(xsum1[4,1],' (',xsci[4,1],'-',xsci[4,2],')'),
Q5=paste0(xsum1[5,1],' (',xsci[5,1],'-',xsci[5,2],')'),
pq5=round(xsum1nr[5,4],digits=2),ptrend=xtrend[2,4],
lin=paste0(xlin[2,1],' (',xlinci[2,1],'-',xlinci[2,2],')'),
quadp=xlin2[2,4])
}
else if (is.null(subset.condition)) {
tab.row<-data.frame(patt=stringr::str_remove_all(stringr::str_remove_all(rownames(xsum1)[2],'factor\\('),'_q\\)\\d'),
Q1=1,Q2=paste0(xsum1[2,1],' (',xsci[2,1],'-',xsci[2,2],')'),
Q3=paste0(xsum1[3,1],' (',xsci[3,1],'-',xsci[3,2],')'),
Q4=paste0(xsum1[4,1],' (',xsci[4,1],'-',xsci[4,2],')'),
Q5=paste0(xsum1[5,1],' (',xsci[5,1],'-',xsci[5,2],')'),
pq5=round(xsum1nr[5,4],digits=2),ptrend=xtrend[2,4],
lin=paste0(xlin[2,1],' (',xlinci[2,1],'-',xlinci[2,2],')'),
quadp=xlin2[2,4])
}
tab.row<-tab.row%>%
mutate(Q2=ifelse(xsum1nr[2,4]<0.05 & xsum1nr[2,4]>=0.01,stringr::str_replace(Q2,'$','*'),
ifelse(xsum1nr[2,4]<0.01,stringr::str_replace(Q2,'$','**'),Q2)))%>%
mutate(Q3=ifelse(xsum1nr[3,4]<0.05 & xsum1nr[3,4]>=0.01,stringr::str_replace(Q3,'$','*'),
ifelse(xsum1nr[3,4]<0.01,stringr::str_replace(Q3,'$','**'),Q3)))%>%
mutate(Q4=ifelse(xsum1nr[4,4]<0.05 & xsum1nr[4,4]>=0.01,stringr::str_replace(Q4,'$','*'),
ifelse(xsum1nr[4,4]<0.01,stringr::str_replace(Q4,'$','**'),Q4)))%>%
mutate(Q5=ifelse(xsum1nr[5,4]<0.05 & xsum1nr[5,4]>=0.01,stringr::str_replace(Q5,'$','*'),
ifelse(xsum1nr[5,4]<0.01,stringr::str_replace(Q5,'$','**'),Q5)))%>%
mutate(pq5=ifelse(xsum1nr[5,4]>=0.05,pq5,
ifelse(xsum1nr[5,4]<0.05 & xsum1nr[5,4]>=0.01,stringr::str_replace(pq5,'$','*'),
ifelse(xsum1nr[5,4]<0.01,'<0.01**',`pq5`))))%>%
mutate(lin=ifelse(summary(modelfulla_L)$coefficients[2,4]<0.05 & summary(modelfulla_L)$coefficients[2,4]>=0.01,stringr::str_replace(lin,'$','*'),
ifelse(summary(modelfulla_L)$coefficients[2,4]<0.01,stringr::str_replace(lin,'$','**'),lin)))%>%
mutate(ptrend=(ifelse(xtrend[2,4]>=0.05,ptrend,
ifelse(xtrend[2,4]<0.05 & xtrend[2,4]>=0.01,stringr::str_replace(ptrend,'$','*'),
ifelse(xtrend[2,4]<0.01,'<0.01**',ptrend)))))%>%
mutate(quadp=(ifelse(xlin2[2,4]>=0.05,quadp,
ifelse(xlin2[2,4]<0.05 & xlin2[2,4]>=0.01,stringr::str_replace(quadp,'$','*'),
ifelse(xlin2[2,4]<0.01,'<0.01**',quadp)))))
model.list[[i]]<-modelfull
if( i ==1){
out.results<-tab.row
}
else if( i !=1){
out.results<-rbind(out.results,tab.row)
}
}
# Text process results table
if (is.null(subset.condition)==F) {
for(i in c(3:6,9)){
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)(\\))','0)')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)(\\s)','0 ')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)(\\-)','0-')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\-\\d)(\\))','.00)')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=^\\d)(\\s\\()','.00 (')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\(\\d)\\-','.00-')
}
for(i in c(7,8,10)){
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)($)','0')
}
}
else if (is.null(subset.condition)==F){
for(i in c(2:5,8)){
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)(\\))','0)')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)(\\s)','0 ')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)(\\-)','0-')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\-\\d)(\\))','.00)')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=^\\d)(\\s\\()','.00 (')
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\(\\d)\\-','.00-')
}
for(i in c(6,7,9)){
out.results[,i]<-stringr::str_replace(out.results[,i],'(?<=\\.\\d)($)','0')
}
}
return(list(results=out.results))
}
results_function(df=dat,covariates=covars.logit,variables=c('FS_ENet','Age_ENet',
'FdAs_ENet','HHS_ENet','PC1','PC2'),cuts=5,subset.condition='Diet.ext.ind.reg==1')
results_function(df=dat,covariates=covars.logit,variables=c('FS_ENet','Age_ENet',
'FdAs_ENet','HHS_ENet','PC1','PC2'),cuts=5,subset.condition='Diet.ext.ind.reg==1')
results_function(df=dat,covariates=covars.logit,variables=c('FS_ENet','Age_ENet',
'FdAs_ENet','HHS_ENet','PC1','PC2'),cuts=5,subset.condition=NULL)
(df=dat;covariates=covars.logit;variables=c('FS_ENet','Age_ENet',
'FdAs_ENet','HHS_ENet','PC1','PC2');cuts=5;subset.condition=NULL)
(df=dat;covariates=covars.logit;variables=c('FS_ENet','Age_ENet','FdAs_ENet','HHS_ENet','PC1','PC2');cuts=5;subset.condition=NULL)
df=dat;covariates=covars.logit;variables=c('FS_ENet','Age_ENet','FdAs_ENet','HHS_ENet','PC1','PC2');cuts=5;subset.condition=NULL
df=dat;covariates=covars.logit;variables=c('FS_ENet','Age_ENet','FdAs_ENet','HHS_ENet','PC1','PC2');cuts=5;subset.condition=NULL
library( tidyverse )
library( survey )
setwd( "/Volumes/My Passport for Mac/Arthur Lab/FPED Raw Data/Analysis files/GitHub Repository Files /NHANES-Diet-Penalized-Regression/Data-Rodeo" )
dat <- readRDS( "04-Analytic-Data.rds" ) %>%
dplyr::filter( is.na( WTDR18YR ) == F )
df=dat;covariates=covars.logit;variables=c('FS_ENet','Age_ENet','FdAs_ENet','HHS_ENet','PC1','PC2');cuts=5;subset.condition=NULL
covars.logit<-c('Race_binary','Gender','Age','KCAL','BMXBMI','HHSize','FoodAsstPnowic',
'SmokStat','fipr','KCAL','WeekMetMin','Education_bin',
'PrimaryCAGroup','CCI_Score')
df=dat;covariates=covars.logit;variables=c('FS_ENet','Age_ENet','FdAs_ENet','HHS_ENet','PC1','PC2');cuts=5;subset.condition=NULL
## quantile cutting function ##
quant_cut<-function(var,x,df){
xvec<-vector() # initialize null vector to store
for (i in 1:x){
xvec[i]<-i/x
}
qs<-c(min(df[[var]],na.rm=T), quantile(df[[var]],xvec,na.rm=T))
df[['new']]=x+1 #initialize variable
for (i in 1:(x)){
df[['new']]<-ifelse(df[[var]]<qs[i+1] & df[[var]]>=qs[i],
c(1:length(qs))[i],
ifelse(df[[var]]==qs[qs==max(qs)],x,df[['new']]))
}
return(df[['new']])
}
## trend variable-creating function ##
trend_func<-function(rank.var,cont.var,df,trend.var,x){
df[[trend.var]]=1
medians<-vector()
for (i in 1:x){
newdf<-df[df[[rank.var]]==i,]
medians[i]<-median(newdf[[cont.var]],na.rm=T)
df[[trend.var]]<-ifelse(df[[rank.var]]==i,medians[i],df[[trend.var]])
}
return(df)
}
# index names and naming index quantile variables to be introduced into data
var.names<-variables
var.names.q<-paste0(var.names,'_q') # create variable names for new cut variables, pasting '_q' at end of names
var.names.trend<-paste0(var.names,'_trend') # create variable names for new cut variables, pasting '_q' at end of names
if (is.null( subset.condition )){
df.sub <- df
}
else if (is.null( subset.condition )==F){
df.sub<-df[which(eval(parse(text=paste0('df$',subset.condition)))),]
}
# create quantile, trend, standardized, and transformed (square) variables on data subset
for(i in 1:length(variables)){
df.sub[,var.names.q[i]]<-quant_cut(var = var.names[i],
x=cuts,df=df.sub) # cut
df.sub<-trend_func(rank.var=var.names.q[i],
cont.var=var.names[i],df=df.sub, trend.var=var.names.trend[i],x=cuts) # trend
df.sub[,paste0(var.names[i],'_sc')]<- df.sub[,var.names[i]] / sd( df.sub[,var.names[i]], na.rm=T ) # standardized
df.sub[,paste0(var.names[i],'_sc2')]<- ( df.sub[,var.names[i]] / sd( df.sub[,var.names[i]], na.rm=T ) )^2 # squared
}
# join with input dataset
df.new <- left_join( df, df.sub )
# join with input dataset
invisible(df.new <- left_join( df, df.sub ))
# join with input dataset
invisible(df.new <- left_join( df, df.sub ))
# join with input dataset
df.new <- left_join( df, df.sub )
design<-survey::svydesign(id = ~SDMVPSU, weights = ~WTDR18YR, strata = ~SDMVSTRA,
nest = TRUE, survey.lonely.psu = "adjust", data = df.new)
if(is.null(subset.condition)==F){
design<-subset(design, eval(parse(text=(subset.condition)))) # inclusions/exclusions
}
design$variables
# fit models
model.list<- list() # empty list to store results
for(i in 1:length(var.names)){
modelfull<-survey::svyglm(formula(paste0('BinFoodSecHH~factor(',var.names[i],'_q)+',
paste0(covariates,collapse = '+'))),
design=design,
family = 'quasibinomial')
modelfulla_T<-survey::svyglm(formula(paste0('BinFoodSecHH~',var.names[i],'_trend+',
paste0(covariates,collapse = '+'))),
design=design,
family = 'quasibinomial')
modelfulla_L<-survey::svyglm(formula(paste0('BinFoodSecHH~',var.names[i],'_sc+',
paste0(covariates,collapse = '+'))),
design=design,
family = 'quasibinomial')
modelfulla_L2<-survey::svyglm(formula(paste0('BinFoodSecHH~',var.names[i],'_sc2+',
paste0(covariates,collapse = '+'))),
design=design,
family = 'quasibinomial')
xsum1<-round(exp(summary(modelfull)$coefficients),digits=2)
xsum1nr<-summary(modelfull)$coefficients # not rounded to get correct asterisks in table
xsci<-round(exp(confint(modelfull)),digits=2)
xtrend<-round(summary(modelfulla_T)$coefficients,digits=2)
xlin<-round(exp(summary(modelfulla_L)$coefficients),digits=2)
xlinci<-round(exp(confint(modelfulla_L)),digits=2)
xlin2<-round(summary(modelfulla_L2)$coefficients,digits=2)
if (is.null(subset.condition)==F) {
tab.row<-data.frame(patt=stringr::str_remove_all(stringr::str_remove_all(rownames(xsum1)[2],'factor\\('),'_q\\)\\d'),
subset=subset.condition,
Q1=1,Q2=paste0(xsum1[2,1],' (',xsci[2,1],'-',xsci[2,2],')'),
Q3=paste0(xsum1[3,1],' (',xsci[3,1],'-',xsci[3,2],')'),
Q4=paste0(xsum1[4,1],' (',xsci[4,1],'-',xsci[4,2],')'),
Q5=paste0(xsum1[5,1],' (',xsci[5,1],'-',xsci[5,2],')'),
pq5=round(xsum1nr[5,4],digits=2),ptrend=xtrend[2,4],
lin=paste0(xlin[2,1],' (',xlinci[2,1],'-',xlinci[2,2],')'),
quadp=xlin2[2,4])
}
else if (is.null(subset.condition)) {
tab.row<-data.frame(patt=stringr::str_remove_all(stringr::str_remove_all(rownames(xsum1)[2],'factor\\('),'_q\\)\\d'),
Q1=1,Q2=paste0(xsum1[2,1],' (',xsci[2,1],'-',xsci[2,2],')'),
Q3=paste0(xsum1[3,1],' (',xsci[3,1],'-',xsci[3,2],')'),
Q4=paste0(xsum1[4,1],' (',xsci[4,1],'-',xsci[4,2],')'),
Q5=paste0(xsum1[5,1],' (',xsci[5,1],'-',xsci[5,2],')'),
pq5=round(xsum1nr[5,4],digits=2),ptrend=xtrend[2,4],
lin=paste0(xlin[2,1],' (',xlinci[2,1],'-',xlinci[2,2],')'),
quadp=xlin2[2,4])
}
tab.row<-tab.row%>%
mutate(Q2=ifelse(xsum1nr[2,4]<0.05 & xsum1nr[2,4]>=0.01,stringr::str_replace(Q2,'$','*'),
ifelse(xsum1nr[2,4]<0.01,stringr::str_replace(Q2,'$','**'),Q2)))%>%
mutate(Q3=ifelse(xsum1nr[3,4]<0.05 & xsum1nr[3,4]>=0.01,stringr::str_replace(Q3,'$','*'),
ifelse(xsum1nr[3,4]<0.01,stringr::str_replace(Q3,'$','**'),Q3)))%>%
mutate(Q4=ifelse(xsum1nr[4,4]<0.05 & xsum1nr[4,4]>=0.01,stringr::str_replace(Q4,'$','*'),
ifelse(xsum1nr[4,4]<0.01,stringr::str_replace(Q4,'$','**'),Q4)))%>%
mutate(Q5=ifelse(xsum1nr[5,4]<0.05 & xsum1nr[5,4]>=0.01,stringr::str_replace(Q5,'$','*'),
ifelse(xsum1nr[5,4]<0.01,stringr::str_replace(Q5,'$','**'),Q5)))%>%
mutate(pq5=ifelse(xsum1nr[5,4]>=0.05,pq5,
ifelse(xsum1nr[5,4]<0.05 & xsum1nr[5,4]>=0.01,stringr::str_replace(pq5,'$','*'),
ifelse(xsum1nr[5,4]<0.01,'<0.01**',`pq5`))))%>%
mutate(lin=ifelse(summary(modelfulla_L)$coefficients[2,4]<0.05 & summary(modelfulla_L)$coefficients[2,4]>=0.01,stringr::str_replace(lin,'$','*'),
ifelse(summary(modelfulla_L)$coefficients[2,4]<0.01,stringr::str_replace(lin,'$','**'),lin)))%>%
mutate(ptrend=(ifelse(xtrend[2,4]>=0.05,ptrend,
ifelse(xtrend[2,4]<0.05 & xtrend[2,4]>=0.01,stringr::str_replace(ptrend,'$','*'),
ifelse(xtrend[2,4]<0.01,'<0.01**',ptrend)))))%>%
mutate(quadp=(ifelse(xlin2[2,4]>=0.05,quadp,
ifelse(xlin2[2,4]<0.05 & xlin2[2,4]>=0.01,stringr::str_replace(quadp,'$','*'),
ifelse(xlin2[2,4]<0.01,'<0.01**',quadp)))))
model.list[[i]]<-modelfull
if( i ==1){
out.results<-tab.row
}
else if( i !=1){
out.results<-rbind(out.results,tab.row)
}
}
out.results
modelfull
# join with input dataset
df.new <- suppressMessages( left_join( df, df.sub ) )
wd <- "/Volumes/My Passport for Mac/Arthur Lab/FPED Raw Data/Analysis files/GitHub Repository Files /NHANES-Diet-Penalized-Regression/Data-Rodeo" )
wd <- "/Volumes/My Passport for Mac/Arthur Lab/FPED Raw Data/Analysis files/GitHub Repository Files /NHANES-Diet-Penalized-Regression/"
setwd( paste0(wd,"Data-Rodeo")
wd <- "/Volumes/My Passport for Mac/Arthur Lab/FPED Raw Data/Analysis files/GitHub Repository Files /NHANES-Diet-Penalized-Regression/"
wd <- "/Volumes/My Passport for Mac/Arthur Lab/FPED Raw Data/Analysis files/GitHub Repository Files /NHANES-Diet-Penalized-Regression/"
setwd( paste0(wd,"Data-Rodeo") )
dat <- readRDS( "04-Analytic-Data.rds" ) %>%
dplyr::filter( is.na( WTDR18YR ) == F )
# Import result-generating functions
setwd( paste0(wd,"R") )
source('utils.R')
library( tidyverse )
library( survey )
wd <- "/Volumes/My Passport for Mac/Arthur Lab/FPED Raw Data/Analysis files/GitHub Repository Files /NHANES-Diet-Penalized-Regression/"
setwd( paste0(wd,"Data-Rodeo") )
dat <- readRDS( "04-Analytic-Data.rds" ) %>%
dplyr::filter( is.na( WTDR18YR ) == F )
# Import result-generating functions
setwd( paste0(wd,"R") )
source('utils.R')
# covariates to adjust for in model
covars.logit<-c('Race_binary','Gender','Age','KCAL','BMXBMI','HHSize','FoodAsstPnowic',
'SmokStat','fipr','KCAL','WeekMetMin','Education_bin',
'PrimaryCAGroup','CCI_Score')
# tabulate results using function
results_function(df=dat,
covariates=covars.logit,
variables=c('FS_ENet','Age_ENet','FdAs_ENet','HHS_ENet','PC1','PC2'),
cuts=5,
subset.condition='Diet.ext.ind.reg==1')
library( tidyverse )
library( urbnmapr )
library( sf )
install.packages("tigris")
install.packages("rgdal")
> install.packages('rgdal', type = "source", configure.args=c(
'--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config',
'--with-proj-include=/Library/Frameworks/PROJ.framework/Headers',
'--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'))
install.packages('rgdal', type = "source", configure.args=c(
'--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config',
'--with-proj-include=/Library/Frameworks/PROJ.framework/Headers',
'--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'))
wd <- "/Volumes/My Passport for Mac/Arthur Lab/FPED Raw Data/Analysis files/GitHub Repository Files /NHANES-Diet-Penalized-Regression/"
setwd( paste0(wd,"Data-Rodeo") )
dat <- readRDS( "04-Analytic-Data.rds" ) %>%
dplyr::filter( is.na( WTDR18YR ) == F )
library( tidyverse )
library( survey )
library( ggpubr )
install.packages("survey")
install.packages("ggpubr")
wd <- "/Volumes/My Passport for Mac/Arthur Lab/FPED Raw Data/Analysis files/GitHub Repository Files /NHANES-Diet-Penalized-Regression/"
setwd( paste0(wd,"Data-Rodeo") )
dat <- readRDS( "04-Analytic-Data.rds" ) %>%
dplyr::filter( is.na( WTDR18YR ) == F )
des <- survey::svydesign( id = ~SDMVPSU, weights = ~WTDR18YR, strata = ~SDMVSTRA,
nest = TRUE, survey.lonely.psu = "adjust", data = dat )
des <- subset( des, Diet.ext.ind.reg == 1 )
ggplot( des$v )
data.frame( svyby( ~FS_ENet, by = ~TimeCAFactor, design = des, FUN = svymean, na.rm = T )  ) %>%
ggplot( data = ., mapping = aes( x = TimeCAFactor, y = FS_ENet )  )  +
geom_point( shape = 5, size = 3 )  +
geom_errorbar( aes( ymin = FS_ENet-se, ymax = FS_ENet+se ) , width = .2,
position = position_dodge( .9 )  )  +
theme_classic( )
library(survey)
des <- svydesign( id = ~SDMVPSU, weights = ~WTDR18YR, strata = ~SDMVSTRA,
nest = TRUE, survey.lonely.psu = "adjust", data = dat )
des <- subset( des, Diet.ext.ind.reg == 1 )
data.frame( svyby( ~FS_ENet, by = ~TimeCAFactor, design = des, FUN = svymean, na.rm = T )  ) %>%
ggplot( data = ., mapping = aes( x = TimeCAFactor, y = FS_ENet )  )  +
geom_point( shape = 5, size = 3 )  +
geom_errorbar( aes( ymin = FS_ENet-se, ymax = FS_ENet+se ) , width = .2,
position = position_dodge( .9 )  )  +
theme_classic( )
summary( svyglm( formula = FS_ENet ~ TimeCAFactor, design = des )  )
svyby( ~BinFoodSecHH, by = ~TimeCAFactor, design = des, FUN = svymean, na.rm = T )
svychisq(~BinFoodSecHH + TimeCAFactor, design=des)
View(svyby( ~BinFoodSecHH, by = ~TimeCAFactor, design = des, FUN = svymean, na.rm = T ) )
svytable(~BinFoodSecHH + TimeCAFactor, design=des)
?svytable
t <- svytable(~BinFoodSecHH + TimeCAFactor, design=des)
sum( t[,1] )
for( i in 1:3){
t[,i] <- t[,i] / sum( t[,i] )
}
t
