load("/Volumes/My Passport for Mac/GitHub Forks/hei/R/sysdata.rda")
library( haven )
library( tidyverse )
library( RNHANES )
library( glue )
setwd( '/Volumes/My Passport for Mac/Arthur Lab/FPED Raw Data/Analysis files/GitHub Repository Files /NHANES-Diet-Penalized-Regression/Data-Raw/FPED' )
dr99 <- read_sas( 'pyr_tot01.sas7bdat' )
import_fped <- function( yrs.cycle ) {
import::from('magrittr','%>%')
dr1 <- haven::read_sas( glue::glue( 'fped_dr1tot_{yrs.cycle}.sas7bdat' ) )
dr2 <- haven::read_sas( glue::glue( 'fped_dr2tot_{yrs.cycle}.sas7bdat' ) )
keep.dr1 <- c( 1, which( stringr::str_detect( colnames( dr1 ), 'DR1T_' ) ) ) # keep intake columns and SEQN
keep.dr2 <- c( 1, which( stringr::str_detect( colnames( dr2 ), 'DR2T_' ) ) )
# merge day 1 and day 2 data
merged.dr <- dplyr::inner_join( dr1[ keep.dr1 ],dr2[ keep.dr2 ], by='SEQN' ) %>%
dplyr::inner_join( ., dr1[, 1:14 ],by='SEQN' ) # merge in metadata
merged.dr <- merged.dr %>%
dplyr::mutate( ProcessedMts = ifelse( DRDINT==2,( DR1T_PF_CUREDMEAT+DR2T_PF_CUREDMEAT ) /2,
ifelse( DRDINT==1 & is.na( DR1T_PF_CUREDMEAT )==FALSE,DR1T_PF_CUREDMEAT,
ifelse( DRDINT==1 & is.na( DR2T_PF_CUREDMEAT )==FALSE,DR2T_PF_CUREDMEAT,NA )  )  ),
RedMts = ifelse( DRDINT==2,( DR1T_PF_MEAT+DR2T_PF_MEAT ) /2,
ifelse( DRDINT==1 & is.na( DR1T_PF_MEAT )==FALSE,DR1T_PF_MEAT,
ifelse( DRDINT==1 & is.na( DR2T_PF_MEAT )==FALSE,DR2T_PF_MEAT,NA )  )  ),
OrganMts = ifelse( DRDINT==2,( DR1T_PF_ORGAN+DR2T_PF_ORGAN ) /2,
ifelse( DRDINT==1 & is.na( DR1T_PF_ORGAN )==FALSE,DR1T_PF_ORGAN,
ifelse( DRDINT==1 & is.na( DR2T_PF_ORGAN )==FALSE,DR2T_PF_ORGAN,NA )  )  ),
Poultry = ifelse( DRDINT==2,( DR1T_PF_POULT+DR2T_PF_POULT ) /2,
ifelse( DRDINT==1 & is.na( DR1T_PF_POULT )==FALSE,DR1T_PF_POULT,
ifelse( DRDINT==1 & is.na( DR2T_PF_POULT )==FALSE,DR2T_PF_POULT,NA )  )  ),
Fish_Hi = ifelse( DRDINT==2,( DR1T_PF_SEAFD_HI+DR2T_PF_SEAFD_HI ) /2,
ifelse( DRDINT==1 & is.na( DR1T_PF_SEAFD_HI )==FALSE,DR1T_PF_SEAFD_HI,
ifelse( DRDINT==1 & is.na( DR2T_PF_SEAFD_HI )==FALSE,DR2T_PF_SEAFD_HI,NA )  )  ),
Fish_Lo = ifelse( DRDINT==2,( DR1T_PF_SEAFD_LOW+DR2T_PF_SEAFD_LOW ) /2,
ifelse( DRDINT==1 & is.na( DR1T_PF_SEAFD_LOW )==FALSE,DR1T_PF_SEAFD_LOW,
ifelse( DRDINT==1 & is.na( DR2T_PF_SEAFD_LOW )==FALSE,DR2T_PF_SEAFD_LOW,NA )  )  ),
Eggs = ifelse( DRDINT==2,( DR1T_PF_EGGS+DR2T_PF_EGGS ) /2,
ifelse( DRDINT==1 & is.na( DR1T_PF_EGGS )==FALSE,DR1T_PF_EGGS,
ifelse( DRDINT==1 & is.na( DR2T_PF_EGGS )==FALSE,DR2T_PF_EGGS,NA )  )  ),
SolidFats = ifelse( DRDINT==2,( DR1T_SOLID_FATS+DR2T_SOLID_FATS ) /2,
ifelse( DRDINT==1 & is.na( DR1T_SOLID_FATS )==FALSE,DR1T_SOLID_FATS,
ifelse( DRDINT==1 & is.na( DR2T_SOLID_FATS )==FALSE,DR2T_SOLID_FATS,NA )  )  ),
Oils = ifelse( DRDINT==2,( DR1T_OILS+DR2T_OILS ) /2,
ifelse( DRDINT==1 & is.na( DR1T_OILS )==FALSE,DR1T_OILS,
ifelse( DRDINT==1 & is.na( DR2T_OILS )==FALSE,DR2T_OILS,NA )  )  ),
Milk = ifelse( DRDINT==2,( DR1T_D_MILK+DR2T_D_MILK ) /2,
ifelse( DRDINT==1 & is.na( DR1T_D_MILK )==FALSE,DR1T_D_MILK,
ifelse( DRDINT==1 & is.na( DR2T_D_MILK )==FALSE,DR2T_D_MILK,NA )  )  ),
Yogurt = ifelse( DRDINT==2,( DR1T_D_YOGURT+DR2T_D_YOGURT ) /2,
ifelse( DRDINT==1 & is.na( DR1T_D_YOGURT )==FALSE,DR1T_D_YOGURT,
ifelse( DRDINT==1 & is.na( DR2T_D_YOGURT )==FALSE,DR2T_D_YOGURT,NA )  )  ),
Cheese = ifelse( DRDINT==2,( DR1T_D_CHEESE+DR2T_D_CHEESE ) /2,
ifelse( DRDINT==1 & is.na( DR1T_D_CHEESE )==FALSE,DR1T_D_CHEESE,
ifelse( DRDINT==1 & is.na( DR2T_D_CHEESE )==FALSE,DR2T_D_CHEESE,NA )  )  ),
Alcohol = ifelse( DRDINT==2,( DR1T_A_DRINKS+DR2T_A_DRINKS ) /2,
ifelse( DRDINT==1 & is.na( DR1T_A_DRINKS )==FALSE,DR1T_A_DRINKS,
ifelse( DRDINT==1 & is.na( DR2T_A_DRINKS )==FALSE,DR2T_A_DRINKS,NA )  )  ),
F_CitMelBer = ifelse( DRDINT==2,( DR1T_F_CITMLB+DR2T_F_CITMLB ) /2,
ifelse( DRDINT==1 & is.na( DR1T_F_CITMLB )==FALSE,DR1T_F_CITMLB,
ifelse( DRDINT==1 & is.na( DR2T_F_CITMLB )==FALSE,DR2T_F_CITMLB,NA )  )  ),
FruitOther = ifelse( DRDINT==2,( DR1T_F_OTHER+DR2T_F_OTHER ) /2,
ifelse( DRDINT==1 & is.na( DR1T_F_OTHER )==FALSE,DR1T_F_OTHER,
ifelse( DRDINT==1 & is.na( DR2T_F_OTHER )==FALSE,DR2T_F_OTHER,NA )  )  ),
Tomatoes = ifelse( DRDINT==2,( DR1T_V_REDOR_TOMATO+DR2T_V_REDOR_TOMATO ) /2,
ifelse( DRDINT==1 & is.na( DR1T_V_REDOR_TOMATO )==FALSE,DR1T_V_REDOR_TOMATO,
ifelse( DRDINT==1 & is.na( DR2T_V_REDOR_TOMATO )==FALSE,DR2T_V_REDOR_TOMATO,NA )  )  ),
GreenLeafy = ifelse( DRDINT==2,( DR1T_V_DRKGR+DR2T_V_DRKGR ) /2,
ifelse( DRDINT==1 & is.na( DR1T_V_DRKGR )==FALSE,DR1T_V_DRKGR,
ifelse( DRDINT==1 & is.na( DR2T_V_DRKGR )==FALSE,DR2T_V_DRKGR,NA )  )  ),
DarkYlVeg = ifelse( DRDINT==2,( DR1T_V_REDOR_OTHER+DR2T_V_REDOR_OTHER ) /2,
ifelse( DRDINT==1 & is.na( DR1T_V_REDOR_OTHER )==FALSE,DR1T_V_REDOR_OTHER,
ifelse( DRDINT==1 & is.na( DR2T_V_REDOR_OTHER )==FALSE,DR2T_V_REDOR_OTHER,NA )  )  ),
OtherVeg = ifelse( DRDINT==2,( DR1T_V_OTHER+DR2T_V_OTHER ) /2,
ifelse( DRDINT==1 & is.na( DR1T_V_OTHER )==FALSE,DR1T_V_OTHER,
ifelse( DRDINT==1 & is.na( DR2T_V_OTHER )==FALSE,DR2T_V_OTHER,NA )  )  ),
Potatoes = ifelse( DRDINT==2,( DR1T_V_STARCHY_POTATO+DR2T_V_STARCHY_POTATO ) /2,
ifelse( DRDINT==1 & is.na( DR1T_V_STARCHY_POTATO )==FALSE,DR1T_V_STARCHY_POTATO,
ifelse( DRDINT==1 & is.na( DR2T_V_STARCHY_POTATO )==FALSE,DR2T_V_STARCHY_POTATO,NA )  )  ),
OtherStarchyVeg = ifelse( DRDINT==2,( DR1T_V_STARCHY_OTHER+DR2T_V_STARCHY_OTHER ) /2,
ifelse( DRDINT==1 & is.na( DR1T_V_STARCHY_OTHER )==FALSE,DR1T_V_STARCHY_OTHER,
ifelse( DRDINT==1 & is.na( DR2T_V_STARCHY_OTHER )==FALSE,DR2T_V_STARCHY_OTHER,NA )  )  ),
Legumes = ifelse( DRDINT==2,( DR1T_V_LEGUMES+DR2T_V_LEGUMES ) /2,
ifelse( DRDINT==1 & is.na( DR1T_V_LEGUMES )==FALSE,DR1T_V_LEGUMES,
ifelse( DRDINT==1 & is.na( DR2T_V_LEGUMES )==FALSE,DR2T_V_LEGUMES,NA )  )  ),
Soy = ifelse( DRDINT==2,( DR1T_PF_SOY+DR2T_PF_SOY ) /2,
ifelse( DRDINT==1 & is.na( DR1T_PF_SOY )==FALSE,DR1T_PF_SOY,
ifelse( DRDINT==1 & is.na( DR2T_PF_SOY )==FALSE,DR2T_PF_SOY,NA )  )  ),
RefinedGrain = ifelse( DRDINT==2,( DR1T_G_REFINED+DR2T_G_REFINED ) /2,
ifelse( DRDINT==1 & is.na( DR1T_G_REFINED )==FALSE,DR1T_G_REFINED,
ifelse( DRDINT==1 & is.na( DR2T_G_REFINED )==FALSE,DR2T_G_REFINED,NA )  )  ),
WholeGrain = ifelse( DRDINT==2,( DR1T_G_WHOLE+DR2T_G_WHOLE ) /2,
ifelse( DRDINT==1 & is.na( DR1T_G_WHOLE )==FALSE,DR1T_G_WHOLE,
ifelse( DRDINT==1 & is.na( DR2T_G_WHOLE )==FALSE,DR2T_G_WHOLE,NA )  )  ),
Nuts = ifelse( DRDINT==2,( DR1T_PF_NUTSDS+DR2T_PF_NUTSDS ) /2,
ifelse( DRDINT==1 & is.na( DR1T_PF_NUTSDS )==FALSE,DR1T_PF_NUTSDS,
ifelse( DRDINT==1 & is.na( DR2T_PF_NUTSDS )==FALSE,DR2T_PF_NUTSDS,NA )  )  ),
AddedSugars = ifelse( DRDINT==2,( DR1T_ADD_SUGARS+DR2T_ADD_SUGARS ) /2,
ifelse( DRDINT==1 & is.na( DR1T_ADD_SUGARS )==FALSE,DR1T_ADD_SUGARS,
ifelse( DRDINT==1 & is.na( DR2T_ADD_SUGARS )==FALSE,DR2T_ADD_SUGARS,NA ) ) ) ) %>%
select( SEQN, ProcessedMts, RedMts, OrganMts, Poultry, Fish_Hi, Fish_Lo, Eggs, SolidFats, Oils, Milk,
Yogurt, Cheese, Alcohol, FruitOther, F_CitMelBer, Tomatoes, GreenLeafy, DarkYlVeg, OtherVeg,
Potatoes, OtherStarchyVeg, Legumes, Soy, RefinedGrain, WholeGrain, Nuts, AddedSugars )
return( merged.dr)
}
# apply function to return list of wrangled datasets
list.0518 <- lapply( c( '0506', '0708', '0910', '1112', '1314',
'1516', '1718'), function( x ) import_fped( x ))
View(list.0518)
View(list.0518[[1]])
View(fped0708_both)
View(fped0506_both)
import_fped <- function( yrs.cycle ) {
import::from('magrittr','%>%')
dr1 <- haven::read_sas( glue::glue( 'fped_dr1tot_{yrs.cycle}.sas7bdat' ) )
dr2 <- haven::read_sas( glue::glue( 'fped_dr2tot_{yrs.cycle}.sas7bdat' ) )
keep.dr1 <- c( 1, which( stringr::str_detect( colnames( dr1 ), 'DR1T_' ) ) ) # keep intake columns and SEQN
keep.dr2 <- c( 1, which( stringr::str_detect( colnames( dr2 ), 'DR2T_' ) ) )
# merge day 1 and day 2 data
merged.dr <- dplyr::inner_join( dr1[ keep.dr1 ],dr2[ keep.dr2 ], by='SEQN' ) %>%
dplyr::inner_join( ., dr1[, 1:14 ],by='SEQN' ) # merge in metadata
return(dr1, dr2, merged.dr)
}
list.0518 <- lapply( c( '0506', '0708', '0910', '1112', '1314',
'1516', '1718'), function( x ) import_fped( x ))
import_fped <- function( yrs.cycle ) {
import::from('magrittr','%>%')
dr1 <- haven::read_sas( glue::glue( 'fped_dr1tot_{yrs.cycle}.sas7bdat' ) )
dr2 <- haven::read_sas( glue::glue( 'fped_dr2tot_{yrs.cycle}.sas7bdat' ) )
keep.dr1 <- c( 1, which( stringr::str_detect( colnames( dr1 ), 'DR1T_' ) ) ) # keep intake columns and SEQN
keep.dr2 <- c( 1, which( stringr::str_detect( colnames( dr2 ), 'DR2T_' ) ) )
# merge day 1 and day 2 data
merged.dr <- dplyr::inner_join( dr1[ keep.dr1 ],dr2[ keep.dr2 ], by='SEQN' ) %>%
dplyr::inner_join( ., dr1[, 1:14 ],by='SEQN' ) # merge in metadata
return(list(dr1, dr2, merged.dr))
}
list.0518 <- lapply( c( '0506', '0708', '0910', '1112', '1314',
'1516', '1718'), function( x ) import_fped( x ))
list.0518
list.0518[[1]][[1]]
View(list.0518[[1]][[1]])
