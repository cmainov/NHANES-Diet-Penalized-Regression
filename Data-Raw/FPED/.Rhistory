top      <- quantile( lar, top.p, na.rm=T )
bottom   <- quantile( lar, bottom.p, na.rm=T )
lar.w    <- lar
lar.w[ lar.w > top    ] <- top
lar.w[ lar.w < bottom ] <- bottom
lar.n <- scale( lar.w )
lar.p <- dplyr::ntile( lar, 100 )
LAR <- data.frame( lar, lar.w, lar.n, lar.p )
print( summary( lar ) )
par( mfrow=c(2,2) )
plot( density(lar,   na.rm=T), main="Self Sufficiency Ratio (LAR)" )
plot( density(lar.w, na.rm=T), main="LAR Winsorized" )
plot( density(lar.n, na.rm=T), main="LAR Standardized as Z" )
plot( density(lar.p, na.rm=T), main="LAR as Percentile" )
df.lar <- cbind( df, LAR )
return( df.lar )
}
d <- get_lar( df=dat, land='x1', assets='x2' )
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x3 <- rnorm( 1000,200,30 )
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x3 <- rnorm( 1000,200,30 )
dat <- data.frame( x1, x2, x3 )
a <- get_pdpm( df=dat, revenue='x1', depreciation = 'x2',
expenses='x3' )
#' dat <- data.frame( x1, x2, x3, x4, x5, x6 )
#'
#' c <- get_pdpm( df=dat, f.cash='x1', f.si='x2',
#'               f.pr='x3', f.ar='x4', f.tfe='x5', f.dda='x6' )
#'
#' # winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
#' d <- get_pdpm( df=dat, f.cash='x1', f.si='x2',
#'               f.pr='x3', f.ar='x4', f.tfe='x5', f.dda='x6', winsorize=0.95 )
#'
#' @export
get_pdpm <- function( df, expenses, depreciation, revenue, winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
num <- df[[ revenue ]] - ( df[[ expenses ]] + df[[ depreciation ]] )
den <- df[[ revenue ]]
# can't divide by zero
print( paste0( "Denominator cannot be zero: ", sum( den==0 ), " cases have been replaced with NA." ) )
den[ den == 0 ] <- NA
pdpm <- num / den
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( pdpm, top.p, na.rm=T )
bottom   <- quantile( pdpm, bottom.p, na.rm=T )
pdpm.w    <- pdpm
pdpm.w[ pdpm.w > top    ] <- top
pdpm.w[ pdpm.w < bottom ] <- bottom
pdpm.n <- scale( pdpm.w )
pdpm.p <- dplyr::ntile( pdpm, 100 )
PDPM <- data.frame( pdpm, pdpm.w, pdpm.n, pdpm.p )
print( summary( PDPM ) )
par( mfrow=c(2,2) )
plot( density( pdpm,   na.rm=T ), main="Pre-Depreciation Profitability Margin (PDPM)" )
plot( density( pdpm.w, na.rm=T ), main="PDPM Winsorized" )
plot( density( pdpm.n, na.rm=T ), main="PDPM Standardized as Z" )
plot( density( pdpm.p, na.rm=T ), main="PDPM as Percentile" )
df.pdpm <- cbind( df, PDPM )
return( df.pdpm )
}
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x3 <- rnorm( 1000,200,30 )
dat <- data.frame( x1, x2, x3 )
a <- get_pdpm( df=dat, revenue='x1', depreciation = 'x2',
expenses='x3' )
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
dat <- data.frame( x1, x2)
#' zero are normal, and negative numbers indicate the organization is functioning at a deficit.
#'
#' @examples
#' x1 <- rnorm( 1000,100,30 )
#' x2 <- rnorm( 1000,200,30 )
#' x3 <- rnorm( 1000,200,30 )
#' dat <- data.frame( x1, x2, x3 )
#' a <- get_podpm( df=dat, revenue='x1', depreciation='x2' )
#'
#' @export
get_podpm <- function( df, expenses, revenue, winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
num <- df[[ revenue ]] - df[[ expenses ]]
den <- df[[ revenue ]]
# can't divide by zero
print( paste0( "Revenue cannot be zero: ", sum( den==0 ), " cases have been replaced with NA." ) )
den[ den == 0 ] <- NA
podpm <- num / den
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( podpm, top.p, na.rm=T )
bottom   <- quantile( podpm, bottom.p, na.rm=T )
podpm.w    <- podpm
podpm.w[ podpm.w > top    ] <- top
podpm.w[ podpm.w < bottom ] <- bottom
podpm.n <- scale( podpm.w )
podpm.p <- dplyr::ntile( podpm, 100 )
PODPM <- data.frame( podpm, podpm.w, podpm.n, podpm.p )
print( summary( PODPM ) )
par( mfrow=c(2,2) )
plot( density( podpm,   na.rm=T ), main="Post-Depreciation Profitability Margin (PODPM)" )
plot( density( podpm.w, na.rm=T ), main="PODPM Winsorized" )
plot( density( podpm.n, na.rm=T ), main="PODPM Standardized as Z" )
plot( density( podpm.p, na.rm=T ), main="PODPM as Percentile" )
df.podpm <- cbind( df, PODPM )
return( df.podpm )
}
a <- get_podpm( df=dat, revenue='x1', depreciation='x2' )
a <- get_podpm( df=dat, revenue='x1', expenses='x2' )
a
#' x2 <- rnorm( 1000,200,30 )
#' x2[ c(15,300,600) ] <- 0
#' dat <- data.frame( x1,x2 )
#' d <- get_dmr( df=dat, debt='x1', net.assets='x2' )
#' head( d )
#'
#' # winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
#' d <- get_dmr( df=dat, debt='x1', net.assets='x2', winsorize=0.95 )
#'
#' @export
get_dmr <- function( df, liabilities, net.assets, winsorize=0.98 )
{
l <- df[[ liabilities ]]
n <- df[[ net.assets ]]
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
# can't divide by zero
print( paste0( "Unrestricted net assets cannot be zero: ", sum( n==0 ), " cases have been replaced with NA." ) )
n[ n == 0 ] <- NA
dmr <- l / n
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( dmr, top.p, na.rm=T )
bottom   <- quantile( dmr, bottom.p, na.rm=T )
dmr.w    <- dmr
dmr.w[ dmr.w > top    ] <- top
dmr.w[ dmr.w < bottom ] <- bottom
dmr.n <- scale( dmr.w )
dmr.p <- dplyr::ntile( dmr, 100 )
DMR <- data.frame( dmr, dmr.w, dmr.n, dmr.p )
print( summary( DMR ) )
par( mfrow=c(2,2) )
plot( density(dmr,   na.rm=T), main="Self Sufficiency Ratio (DMR)" )
plot( density(dmr.w, na.rm=T), main="DMR Winsorized" )
plot( density(dmr.n, na.rm=T), main="DMR Standardized as Z" )
plot( density(dmr.p, na.rm=T), main="DMR as Percentile" )
df.dmr <- cbind( df, DMR )
return( df.dmr )
}
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x2[ c(15,300,600) ] <- 0
dat <- data.frame( x1,x2 )
d <- get_dmr( df=dat, liabilities = ='x1', net.assets='x2' )
d <- get_dmr( df=dat, liabilities ='x1', net.assets='x2' )
d <- get_dmr( df=dat, liabilities ='x1', net.assets='x2' )
# winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
d <- get_dmr( df=dat, debt='x1', net.assets='x2', winsorize=0.95 )
d <- get_dmr( df=dat, liabilities ='x1', net.assets='x2' )
d <- get_dmr( df=dat, liabilities ='x1', net.assets='x2' )
#' x2 <- rnorm( 1000,200,30 )
#' x2[ c(15,300,600) ] <- 0
#' dat <- data.frame( x1,x2 )
#' d <- get_er( df=dat, debt='x1', net.assets='x2' )
#' head( d )
#'
#' # winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
#' d <- get_er( df=dat, debt='x1', net.assets='x2', winsorize=0.95 )
#'
#' @export
get_er <- function( df, net.assets, total.assets, winsorize=0.98 )
{
a <- df[[ net.assets ]]
t <- df[[ total.assets ]]
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
# can't divide by zero
print( paste0( "Total assets cannot be zero: ", sum( t==0 ), " cases have been replaced with NA." ) )
t[ t == 0 ] <- NA
er <- a / t
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( er, top.p, na.rm=T )
bottom   <- quantile( er, bottom.p, na.rm=T )
er.w    <- er
er.w[ er.w > top    ] <- top
er.w[ er.w < bottom ] <- bottom
er.n <- scale( er.w )
er.p <- dplyr::ntile( er, 100 )
ER <- data.frame( er, er.w, er.n, er.p )
print( summary( ER ) )
par( mfrow=c(2,2) )
plot( density(er,   na.rm=T), main="Equity Ratio (ER)" )
plot( density(er.w, na.rm=T), main="ER Winsorized" )
plot( density(er.n, na.rm=T), main="ER Standardized as Z" )
plot( density(er.p, na.rm=T), main="ER as Percentile" )
df.er <- cbind( df, ER )
return( df.er )
}
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x2[ c(15,300,600) ] <- 0
dat <- data.frame( x1,x2 )
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x2[ c(15,300,600) ] <- 0
dat <- data.frame( x1,x2 )
d <- get_er( df=dat, debt='x1', net.assets='x2' )
# winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
d <- get_er( df=dat, total.assets='x1', net.assets='x2', winsorize=0.95 )
# winsorize at 0.025 and 0.975 percentiles instead of 0.01 and 0.99
d <- get_er( df=dat, total.assets='x1', net.assets='x2', winsorize=0.95 )
#' assets than current liabilities.
#'
#' @examples
#' x1 <- rnorm( 1000,100,30 )
#' x2 <- rnorm( 1000,200,30 )
#' x3 <- rnorm( 1000,200,30 )
#' dat <- data.frame( x1, x2, x3 )
#' a <- get_qr( df=dat, revenue='x1', depreciation='x2' )
#'
#' @export
get_qr <- function( df, cash, si, pr, ar, ap, gp, winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
num <- df[[ cash ]] + df[[ si ]] + df[[ pr ]] + df[[ ar ]]
den <- df[[ ap ]] + df[[ gp ]]
# can't divide by zero
print( paste0( "Payables cannot be zero: ", sum( den==0 ), " cases have been replaced with NA." ) )
den[ den == 0 ] <- NA
qr <- num / den
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( qr, top.p, na.rm=T )
bottom   <- quantile( qr, bottom.p, na.rm=T )
qr.w    <- qr
qr.w[ qr.w > top    ] <- top
qr.w[ qr.w < bottom ] <- bottom
qr.n <- scale( qr.w )
qr.p <- dplyr::ntile( qr, 100 )
QR <- data.frame( qr, qr.w, qr.n, qr.p )
print( summary( QR ) )
par( mfrow=c(2,2) )
plot( density( qr,   na.rm=T ), main="Quick Ratio (QR)" )
plot( density( qr.w, na.rm=T ), main="QR Winsorized" )
plot( density( qr.n, na.rm=T ), main="QR Standardized as Z" )
plot( density( qr.p, na.rm=T ), main="QR as Percentile" )
df.qr <- cbind( df, QR )
return( df.qr )
}
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x3 <- rnorm( 1000,200,30 )
x4 <- rnorm( 1000,100,30 )
x5 <- rnorm( 1000,200,30 )
x6 <- rnorm( 1000,200,30 )
dat <- data.frame( x1, x2, x3, x4, x5, x6 )
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x3 <- rnorm( 1000,200,30 )
x4 <- rnorm( 1000,100,30 )
x5 <- rnorm( 1000,200,30 )
x6 <- rnorm( 1000,200,30 )
dat <- data.frame( x1, x2, x3, x4, x5, x6 )
a <- get_qr <- function( dat, cash='x1', si='x2', pr='x3', ar='x4', ap='x5', gp='x6', winsorize=0.98 )
a <- get_qr <- get_qr( dat, cash='x1', si='x2', pr='x3', ar='x4', ap='x5', gp='x6', winsorize=0.98 )
a <- get_qr <- get_qr( dat, cash='x1', si='x2', pr='x3', ar='x4', ap='x5', gp='x6', winsorize=0.98 )
a <- get_qr( dat, cash='x1', si='x2', pr='x3', ar='x4', ap='x5', gp='x6', winsorize=0.98 )
get_qr( dat, cash='x1', si='x2', pr='x3', ar='x4', ap='x5', gp='x6', winsorize=0.98 )
a <- get_qr( ddf=at, cash='x1', si='x2', pr='x3', ar='x4', ap='x5', gp='x6', winsorize=0.98 )
get_qr( df=dat, cash='x1', si='x2', pr='x3', ar='x4', ap='x5', gp='x6', winsorize=0.98 )
get_qr( df=dat, cash='x1', si='x2', pr='x3', ar='x4', ap='x5', gp='x6', winsorize=0.98 )
#' assets than current liabilities.
#'
#' @examples
#' x1 <- rnorm( 1000,100,30 )
#' x2 <- rnorm( 1000,200,30 )
#' x3 <- rnorm( 1000,200,30 )
#' dat <- data.frame( x1, x2, x3 )
#' a <- get_qr( df=dat, revenue='x1', depreciation='x2' )
#'
#' @export
get_qr <- function( df, cash, si, pr, ar, ap, gp, winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
num <- df[[ cash ]] + df[[ si ]] + df[[ pr ]] + df[[ ar ]]
den <- df[[ ap ]] + df[[ gp ]]
# can't divide by zero
print( paste0( "Payables cannot be zero: ", sum( den==0 ), " cases have been replaced with NA." ) )
den[ den == 0 ] <- NA
qr <- num / den
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( qr, top.p, na.rm=T )
bottom   <- quantile( qr, bottom.p, na.rm=T )
qr.w    <- qr
qr.w[ qr.w > top    ] <- top
qr.w[ qr.w < bottom ] <- bottom
qr.n <- scale( qr.w )
qr.p <- dplyr::ntile( qr, 100 )
QR <- data.frame( qr, qr.w, qr.n, qr.p )
print( summary( QR ) )
par( mfrow=c(2,2) )
plot( density( qr,   na.rm=T ), main="Quick Ratio (QR)" )
plot( density( qr.w, na.rm=T ), main="QR Winsorized" )
plot( density( qr.n, na.rm=T ), main="QR Standardized as Z" )
plot( density( qr.p, na.rm=T ), main="QR as Percentile" )
df.qr <- cbind( df, QR )
return( df.qr )
}
a <- get_qr( df=dat, cash='x1', si='x2', pr='x3', ar='x4', ap='x5', gp='x6', winsorize=0.98 )
x6[ c(1,10,100), ] <- 0
x6[ c(1,10,100), ] <- seq(0,3)
seq(0,3)
x6[ c(1,10,100), ] <- rep(0,3)
x6[ c(1,10,100), ] <- rep(0,3)
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x3 <- rnorm( 1000,200,30 )
x4 <- rnorm( 1000,100,30 )
x5 <- rnorm( 1000,200,30 )
x6 <- rnorm( 1000,200,30 )
rep(0,3)
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x3 <- rnorm( 1000,200,30 )
x4 <- rnorm( 1000,100,30 )
x5 <- rnorm( 1000,200,30 )
x6 <- rnorm( 1000,200,30 )
x6[ c(1,10,100), ] <- 0
x6
x6[ c(1,10,100) ] <- 0
dat <- data.frame( x1, x2, x3, x4, x5, x6 )
a <- get_qr( df=dat, cash='x1', si='x2', pr='x3', ar='x4', ap='x5', gp='x6', winsorize=0.98 )
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x3 <- rnorm( 1000,200,30 )
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x3 <- rnorm( 1000,200,30 )
x3[ c(1,10,100)]
dat <- data.frame( x1, x2, x3 )
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x3 <- rnorm( 1000,200,30 )
x3[ c(1,10,100)]
x3[ c(1,10,100)] <- 0
dat <- data.frame( x1, x2, x3 )
a <- get_stdr( df=dat, ap='x1', gp='x2', net.assets='x3', winsorize=0.98 )
#' x2 <- rnorm( 1000,200,30 )
#' x3 <- rnorm( 1000,200,30 )
#' x4 <- rnorm( 1000,100,30 )
#' x5 <- rnorm( 1000,200,30 )
#' x6 <- rnorm( 1000,200,30 )
#' dat <- data.frame( x1, x2, x3, x4, x5, x6 )
#'
#' a <- get_stdr( df=dat, cash='x1', si='x2', pr='x3', ar='x4', ap='x5', gp='x6', winsorize=0.98 )
#'
#' @export
get_stdr <- function( df, ap, gp, net.assets, winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
num <- df[[ ap ]] + df[[ gp ]]
a <- df[[ net.assets ]]
# can't divide by zero
print( paste0( "Net assets cannot be zero: ", sum( a==0 ), " cases have been replaced with NA." ) )
a[ a == 0 ] <- NA
stdr <- num / a
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( stdr, top.p, na.rm=T )
bottom   <- quantile( stdr, bottom.p, na.rm=T )
stdr.w    <- stdr
stdr.w[ stdr.w > top    ] <- top
stdr.w[ stdr.w < bottom ] <- bottom
stdr.n <- scale( stdr.w )
stdr.p <- dplyr::ntile( stdr, 100 )
STDR <- data.frame( stdr, stdr.w, stdr.n, stdr.p )
print( summary( STDR ) )
par( mfrow=c(2,2) )
plot( density( stdr,   na.rm=T ), main="Short Term Debt Ratio (STDR)" )
plot( density( stdr.w, na.rm=T ), main="STDR Winsorized" )
plot( density( stdr.n, na.rm=T ), main="STDR Standardized as Z" )
plot( density( stdr.p, na.rm=T ), main="STDR as Percentile" )
df.stdr <- cbind( df, STDR )
return( df.stdr )
}
a <- get_stdr( df=dat, ap='x1', gp='x2', net.assets='x3', winsorize=0.98 )
x1 <- rnorm( 1000,100,30 )
x2 <- rnorm( 1000,200,30 )
x3 <- rnorm( 1000,200,30 )
x3[ c(1,10,100)] <- 0
dat <- data.frame( x1, x2, x3 )
#' @examples
#' x1 <- rnorm( 1000,100,30 )
#' x2 <- rnorm( 1000,200,30 )
#' x3 <- rnorm( 1000,200,30 )
#' x3[ c(1,10,100)] <- 0
#' dat <- data.frame( x1, x2, x3 )
#'
#' a <- get_dgdr( df=dat, ap='x1', gp='x2', net.assets='x3', winsorize=0.98 )
#'
#' @export
get_dgdr <- function( df, total.contributions, fund.income, total.revenue, winsorize=0.98 )
{
# checks
if( winsorize > 1 | winsorize < 0 )
{ stop( "winsorize argument must be 0 < w < 1" ) }
num <- df[[ total.contributions ]] + df[[ fund.income ]]
r <- df[[ total.revenue ]]
# can't divide by zero
print( paste0( "Total revenue cannot be zero: ", sum( r==0 ), " cases have been replaced with NA." ) )
r[ r == 0 ] <- NA
dgdr <- num / r
top.p    <- 1 - (1-winsorize)/2
bottom.p <- 0 + (1-winsorize)/2
top      <- quantile( dgdr, top.p, na.rm=T )
bottom   <- quantile( dgdr, bottom.p, na.rm=T )
dgdr.w    <- dgdr
dgdr.w[ dgdr.w > top    ] <- top
dgdr.w[ dgdr.w < bottom ] <- bottom
dgdr.n <- scale( dgdr.w )
dgdr.p <- dplyr::ntile( dgdr, 100 )
DGDR <- data.frame( dgdr, dgdr.w, dgdr.n, dgdr.p )
print( summary( DGDR ) )
par( mfrow=c(2,2) )
plot( density( dgdr,   na.rm=T ), main="Donation/Grant Dependence Ratio (DGDR)" )
plot( density( dgdr.w, na.rm=T ), main="DGDR Winsorized" )
plot( density( dgdr.n, na.rm=T ), main="DGDR Standardized as Z" )
plot( density( dgdr.p, na.rm=T ), main="DGDR as Percentile" )
df.dgdr <- cbind( df, DGDR )
return( df.dgdr )
}
a <- get_dgdr( df=dat, total.contributions = ='x1', fund.income='x2', total.revenue='x3', winsorize=0.98 )
dat <- data.frame( x1, x2, x3 )
a <- get_dgdr( df=dat, total.contributions='x1', fund.income='x2', total.revenue='x3', winsorize=0.98 )
read.csv(text=url('https://raw.githubusercontent.com/lecy/fiscal-health/main/EFILE/F9-P10-T00-BALANCE-SHEET.csv'))
read.csv(url('https://raw.githubusercontent.com/lecy/fiscal-health/main/EFILE/F9-P10-T00-BALANCE-SHEET.csv'))
part10<-read.csv(url('https://raw.githubusercontent.com/lecy/fiscal-health/main/EFILE/F9-P10-T00-BALANCE-SHEET.csv'))
part9 <- read.csv(url('https://raw.githubusercontent.com/lecy/fiscal-health/main/EFILE/F9-P09-T00-EXPENSES.csv'))
View(part9)
View(part10)
part10$ASSET_SAVING_BOY
dr99 <- read_sas( url( 'https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat' ) )
library( haven )
dr99 <- read_sas( url( 'https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat' ) )
dr99 <- read_sas( download.file( url( 'https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat' ) ) )
dr99 <- read_sas( download.file( url( 'https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat' ) , destfile = 'fped_dr1tot_0506.sas7bdat' ) )
dr99 <- read_sas( download.file( url='https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat', destfile = 'fped_dr1tot_0506.sas7bdat' ) )
download.file( url='https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat', destfile = 'fped_dr1tot_0506.sas7bdat' )
download.file( url='https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat?raw=true', destfile = 'fped_dr1tot_0506.sas7bdat' )
ownload.file( url='https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat', destfile = 'fped_dr1tot_0506.sas7bdat' )
download.file( url='https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat', destfile = 'fped_dr1tot_0506.sas7bdat' )
dr99 <- read_sas( download.file( url='https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat', destfile = 'fped_dr1tot_0506.sas7bdat' ) )
dr99 <- read_sas( 'https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat', destfile = 'fped_dr1tot_0506.sas7bdat' )
dr99 <- read_sas( 'https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat' )
d <- download.file( url='https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat?raw=true', destfile = 'fped_dr1tot_0506.sas7bdat' )
d
data <- getBinaryURL(url = 'https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat?raw=true')
library(RCurl)
data <- getBinaryURL(url = 'https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat?raw=true')
read_sas(data)
data <- getBinaryURL(url = 'https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat')
read_sas(data)
## Create File
ouptFilename <- "fped_dr1tot_0506.sas7bdat"
fconn <- file(ouptFilename)
write(data, fconn)
close(fconn)
read_sas(data)
data <- getBinaryURL(url = 'https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat?raw=true')
## Create File
ouptFilename <- "fped_dr1tot_0506.sas7bdat"
fconn <- file(ouptFilename)
write(data, fconn)
close(fconn)
read_sas(data)
?read_sas
download.file("https://www.ars.usda.gov/ARSUserFiles/80400530/foodlink/Mypyr_iff.exe",
destfile = "Mypyr_iff.exe")
unzip("Mypyr_iff.exe")
download.file("https://www.ars.usda.gov/ARSUserFiles/80400530/foodlink/Mypyr_iff.exe",
destfile = "Mypyr_iff.exe")
sas <- read.sas7bdat(file = "pyr_iff.sas7bdat", debug = FALSE)
install.packages("sas7bdat")
require("sas7bdat")
sas <- read.sas7bdat(file = "pyr_iff.sas7bdat", debug = FALSE)
download.file("https://www.ars.usda.gov/ARSUserFiles/80400530/foodlink/Mypyr_iff.exe",
destfile = "Mypyr_iff.zip")
unzip("Mypyr_iff.exe")
d <- read_sas(getURL('https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat?raw=true'))
d <- read_sas(getURL('https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat?raw=true'))
d <- read_sas(getURL('https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat'))
d <- read_sas(url('https://github.com/cmainov/NHANES-Diet-Penalized-Regression/blob/main/Data-Raw/FPED/fped_dr1tot_0506.sas7bdat'))
setwd( '/Volumes/My Passport for Mac/Arthur Lab/FPED Raw Data/Analysis files/GitHub Repository Files /NHANES-Diet-Penalized-Regression/Data-Raw/FPED' )
setwd( '/Volumes/My Passport for Mac/Arthur Lab/FPED Raw Data/Analysis files/GitHub Repository Files /NHANES-Diet-Penalized-Regression/Data-Raw/FPED' )
dr99 <- read_sas( 'pyr_tot01.sas7bdat' )
